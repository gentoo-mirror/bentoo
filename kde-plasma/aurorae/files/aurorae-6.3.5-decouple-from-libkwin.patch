From 65eb2e2ddc41a9a6dd43715024a52dcfaa3a8a7f Mon Sep 17 00:00:00 2001
From: Vlad Zahorodnii <vlad.zahorodnii@kde.org>
Date: Sun, 5 Jan 2025 08:53:53 +0200
Subject: [PATCH 1/2] plugins/aurorae: Port away from OffscreenQuickView

The goal is to decouple the aurorae decoration engine from libkwin so it
is independent of the compositor (kwin_wayland or kwin_x11), which is going
to be very handy later when kwin is split into wayland and x11 parts.

Unfortunately, the biggest downside of this change is significant code
duplication.

(cherry-picked from aurorae.git d8e08d537ef266a305d3de434663f045733586fb)

Signed-off-by: Andreas Sturmlechner <asturm@gentoo.org>
---
 .../kdecorations/aurorae/src/CMakeLists.txt   |   2 +-
 .../kdecorations/aurorae/src/aurorae.cpp      |   8 +-
 .../kdecorations/aurorae/src/aurorae.h        |   5 +-
 .../kdecorations/aurorae/src/renderer.cpp     | 355 ++++++++++++++++++
 .../kdecorations/aurorae/src/renderer.h       |  79 ++++
 5 files changed, 441 insertions(+), 8 deletions(-)
 create mode 100644 src/plugins/kdecorations/aurorae/src/renderer.cpp
 create mode 100644 src/plugins/kdecorations/aurorae/src/renderer.h

diff --git a/src/plugins/kdecorations/aurorae/src/CMakeLists.txt b/src/plugins/kdecorations/aurorae/src/CMakeLists.txt
index 8a044bafba..2df54a1002 100644
--- a/src/plugins/kdecorations/aurorae/src/CMakeLists.txt
+++ b/src/plugins/kdecorations/aurorae/src/CMakeLists.txt
@@ -10,6 +10,7 @@ set(kwin5_aurorae_PART_SRCS
     decorationoptions.cpp
     lib/auroraetheme.cpp
     lib/themeconfig.cpp
+    renderer.cpp
 )
 
 add_library(kwin5_aurorae MODULE ${kwin5_aurorae_PART_SRCS})
@@ -24,7 +25,6 @@ target_compile_definitions(kwin5_aurorae PRIVATE
 
 target_link_libraries(kwin5_aurorae
     KDecoration3::KDecoration
-    kwin
     KF6::I18n
     KF6::Package
     KF6::WindowSystem
diff --git a/src/plugins/kdecorations/aurorae/src/aurorae.cpp b/src/plugins/kdecorations/aurorae/src/aurorae.cpp
index 0c0c3cf4a0..96caf86cef 100644
--- a/src/plugins/kdecorations/aurorae/src/aurorae.cpp
+++ b/src/plugins/kdecorations/aurorae/src/aurorae.cpp
@@ -5,11 +5,9 @@
 */
 #include "aurorae.h"
 
-#include "config-kwin.h"
-
 #include "auroraeshared.h"
 #include "auroraetheme.h"
-#include "effect/offscreenquickview.h"
+#include "renderer.h"
 // qml imports
 #include "decorationoptions.h"
 // KDecoration3
@@ -287,7 +285,7 @@ bool Decoration::init()
         m_item->setParentItem(visualParent.value<QQuickItem *>());
         visualParent.value<QQuickItem *>()->setProperty("drawBackground", false);
     } else {
-        m_view = std::make_unique<KWin::OffscreenQuickView>(KWin::OffscreenQuickView::ExportMode::Image);
+        m_view = std::make_unique<Renderer>();
         m_item->setParentItem(m_view->contentItem());
         auto updateSize = [this]() {
             m_item->setSize(m_view->contentItem()->size());
@@ -295,7 +293,7 @@ bool Decoration::init()
         updateSize();
         connect(m_view->contentItem(), &QQuickItem::widthChanged, m_item.get(), updateSize);
         connect(m_view->contentItem(), &QQuickItem::heightChanged, m_item.get(), updateSize);
-        connect(m_view.get(), &KWin::OffscreenQuickView::repaintNeeded, this, &Decoration::updateBuffer);
+        connect(m_view.get(), &Renderer::repaintNeeded, this, &Decoration::updateBuffer);
     }
 
     m_supportsMask = m_item->property("supportsMask").toBool();
diff --git a/src/plugins/kdecorations/aurorae/src/aurorae.h b/src/plugins/kdecorations/aurorae/src/aurorae.h
index d52de75162..dcf90f3c55 100644
--- a/src/plugins/kdecorations/aurorae/src/aurorae.h
+++ b/src/plugins/kdecorations/aurorae/src/aurorae.h
@@ -22,12 +22,13 @@ class KConfigLoader;
 namespace KWin
 {
 class Borders;
-class OffscreenQuickView;
 }
 
 namespace Aurorae
 {
 
+class Renderer;
+
 class Decoration : public KDecoration3::Decoration
 {
     Q_OBJECT
@@ -79,7 +80,7 @@ private:
     KWin::Borders *m_padding;
     QString m_themeName;
 
-    std::unique_ptr<KWin::OffscreenQuickView> m_view;
+    std::unique_ptr<Renderer> m_view;
 };
 
 class ThemeProvider : public KDecoration3::DecorationThemeProvider
diff --git a/src/plugins/kdecorations/aurorae/src/renderer.cpp b/src/plugins/kdecorations/aurorae/src/renderer.cpp
new file mode 100644
index 0000000000..12cc9cc6f3
--- /dev/null
+++ b/src/plugins/kdecorations/aurorae/src/renderer.cpp
@@ -0,0 +1,355 @@
+/*
+    KWin - the KDE window manager
+    This file is part of the KDE project.
+
+    SPDX-FileCopyrightText: 2019 David Edmundson <davidedmundson@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#include "renderer.h"
+
+#include <QGuiApplication>
+#include <QQmlComponent>
+#include <QQmlContext>
+#include <QQmlEngine>
+#include <QQuickItem>
+#include <QQuickRenderControl>
+#include <QQuickView>
+#include <QStyleHints>
+
+#include <QOffscreenSurface>
+#include <QOpenGLContext>
+#include <QOpenGLFramebufferObject>
+#include <QQuickGraphicsDevice>
+#include <QQuickOpenGLUtils>
+#include <QQuickRenderTarget>
+#include <QTimer>
+
+namespace Aurorae
+{
+
+class Renderer::Private
+{
+public:
+    std::unique_ptr<QQuickWindow> m_view;
+    std::unique_ptr<QQuickRenderControl> m_renderControl;
+    std::unique_ptr<QOffscreenSurface> m_offscreenSurface;
+    std::unique_ptr<QOpenGLContext> m_glcontext;
+    std::unique_ptr<QOpenGLFramebufferObject> m_fbo;
+
+    std::unique_ptr<QTimer> m_repaintTimer;
+    QImage m_image;
+    bool m_visible = true;
+
+    std::optional<qreal> m_explicitDpr;
+
+    ulong lastMousePressTime = 0;
+    Qt::MouseButton lastMousePressButton = Qt::NoButton;
+
+    void releaseResources();
+};
+
+Renderer::Renderer()
+    : d(new Renderer::Private)
+{
+    d->m_renderControl = std::make_unique<QQuickRenderControl>();
+
+    d->m_view = std::make_unique<QQuickWindow>(d->m_renderControl.get());
+    Q_ASSERT(d->m_view->setProperty("_KWIN_WINDOW_IS_OFFSCREEN", true) || true);
+    d->m_view->setFlags(Qt::FramelessWindowHint);
+    d->m_view->setColor(Qt::transparent);
+
+    const bool usingGl = d->m_view->rendererInterface()->graphicsApi() == QSGRendererInterface::OpenGL;
+    if (usingGl) {
+        QSurfaceFormat format;
+        format.setOption(QSurfaceFormat::ResetNotification);
+        format.setDepthBufferSize(16);
+        format.setStencilBufferSize(8);
+        format.setAlphaBufferSize(8);
+
+        d->m_view->setFormat(format);
+
+        auto shareContext = QOpenGLContext::globalShareContext();
+        d->m_glcontext = std::make_unique<QOpenGLContext>();
+        d->m_glcontext->setShareContext(shareContext);
+        d->m_glcontext->setFormat(format);
+        d->m_glcontext->create();
+
+        // and the offscreen surface
+        d->m_offscreenSurface = std::make_unique<QOffscreenSurface>();
+        d->m_offscreenSurface->setFormat(d->m_glcontext->format());
+        d->m_offscreenSurface->create();
+
+        d->m_glcontext->makeCurrent(d->m_offscreenSurface.get());
+        d->m_view->setGraphicsDevice(QQuickGraphicsDevice::fromOpenGLContext(d->m_glcontext.get()));
+        d->m_renderControl->initialize();
+        d->m_glcontext->doneCurrent();
+    }
+
+    auto updateSize = [this]() {
+        contentItem()->setSize(d->m_view->size());
+    };
+    updateSize();
+    connect(d->m_view.get(), &QWindow::widthChanged, this, updateSize);
+    connect(d->m_view.get(), &QWindow::heightChanged, this, updateSize);
+
+    d->m_repaintTimer = std::make_unique<QTimer>();
+    d->m_repaintTimer->setSingleShot(true);
+    d->m_repaintTimer->setInterval(10);
+
+    connect(d->m_repaintTimer.get(), &QTimer::timeout, this, &Renderer::update);
+    connect(d->m_renderControl.get(), &QQuickRenderControl::renderRequested, this, &Renderer::handleRenderRequested);
+    connect(d->m_renderControl.get(), &QQuickRenderControl::sceneChanged, this, &Renderer::handleSceneChanged);
+}
+
+Renderer::~Renderer()
+{
+    disconnect(d->m_renderControl.get(), &QQuickRenderControl::renderRequested, this, &Renderer::handleRenderRequested);
+    disconnect(d->m_renderControl.get(), &QQuickRenderControl::sceneChanged, this, &Renderer::handleSceneChanged);
+
+    if (d->m_glcontext) {
+        // close the view whilst we have an active GL context
+        d->m_glcontext->makeCurrent(d->m_offscreenSurface.get());
+    }
+
+    d->m_view.reset();
+    d->m_renderControl.reset();
+}
+
+void Renderer::setDevicePixelRatio(qreal dpr)
+{
+    d->m_explicitDpr = dpr;
+}
+
+void Renderer::handleSceneChanged()
+{
+    d->m_repaintTimer->start();
+    Q_EMIT sceneChanged();
+}
+
+void Renderer::handleRenderRequested()
+{
+    d->m_repaintTimer->start();
+    Q_EMIT renderRequested();
+}
+
+void Renderer::update()
+{
+    if (!d->m_visible) {
+        return;
+    }
+    if (d->m_view->size().isEmpty()) {
+        return;
+    }
+
+    const bool usingGl = d->m_glcontext != nullptr;
+    if (usingGl) {
+        if (!d->m_glcontext->makeCurrent(d->m_offscreenSurface.get())) {
+            // probably a context loss event, kwin is about to reset all the effects anyway
+            return;
+        }
+
+        qreal dpr = d->m_view->screen() ? d->m_view->screen()->devicePixelRatio() : 1.0;
+        if (d->m_explicitDpr.has_value()) {
+            dpr = d->m_explicitDpr.value();
+        }
+
+        const QSize nativeSize = d->m_view->size() * dpr;
+        if (!d->m_fbo || d->m_fbo->size() != nativeSize) {
+            QOpenGLFramebufferObjectFormat fboFormat;
+            fboFormat.setAttachment(QOpenGLFramebufferObject::CombinedDepthStencil);
+            fboFormat.setInternalTextureFormat(GL_RGBA8);
+
+            d->m_fbo = std::make_unique<QOpenGLFramebufferObject>(nativeSize, fboFormat);
+            if (!d->m_fbo->isValid()) {
+                d->m_fbo.reset();
+                d->m_glcontext->doneCurrent();
+                return;
+            }
+        }
+
+        QQuickRenderTarget renderTarget = QQuickRenderTarget::fromOpenGLTexture(d->m_fbo->texture(), d->m_fbo->size());
+        renderTarget.setDevicePixelRatio(dpr);
+        d->m_view->setRenderTarget(renderTarget);
+    }
+
+    d->m_renderControl->polishItems();
+    if (usingGl) {
+        d->m_renderControl->beginFrame();
+    }
+    d->m_renderControl->sync();
+    d->m_renderControl->render();
+    if (usingGl) {
+        d->m_renderControl->endFrame();
+    }
+
+    if (usingGl) {
+        QQuickOpenGLUtils::resetOpenGLState();
+    }
+
+    if (usingGl) {
+        d->m_image = d->m_fbo->toImage();
+        d->m_image.setDevicePixelRatio(d->m_view->effectiveDevicePixelRatio());
+    } else {
+        d->m_image = d->m_view->grabWindow();
+    }
+
+    Q_EMIT repaintNeeded();
+}
+
+void Renderer::forwardMouseEvent(QEvent *e)
+{
+    if (!d->m_visible) {
+        return;
+    }
+    switch (e->type()) {
+    case QEvent::MouseMove:
+    case QEvent::MouseButtonPress:
+    case QEvent::MouseButtonRelease: {
+        QMouseEvent *me = static_cast<QMouseEvent *>(e);
+        const QPoint widgetPos = d->m_view->mapFromGlobal(me->pos());
+        QMouseEvent cloneEvent(me->type(), widgetPos, me->pos(), me->button(), me->buttons(), me->modifiers());
+        cloneEvent.setAccepted(false);
+        QCoreApplication::sendEvent(d->m_view.get(), &cloneEvent);
+        e->setAccepted(cloneEvent.isAccepted());
+
+        if (e->type() == QEvent::MouseButtonPress) {
+            const ulong doubleClickInterval = static_cast<ulong>(QGuiApplication::styleHints()->mouseDoubleClickInterval());
+            const bool doubleClick = (me->timestamp() - d->lastMousePressTime < doubleClickInterval) && me->button() == d->lastMousePressButton;
+            d->lastMousePressTime = me->timestamp();
+            d->lastMousePressButton = me->button();
+            if (doubleClick) {
+                d->lastMousePressButton = Qt::NoButton;
+                QMouseEvent doubleClickEvent(QEvent::MouseButtonDblClick, me->position(), me->globalPosition(), me->button(), me->buttons(), me->modifiers());
+                QCoreApplication::sendEvent(d->m_view.get(), &doubleClickEvent);
+            }
+        }
+
+        return;
+    }
+    case QEvent::HoverEnter:
+    case QEvent::HoverLeave:
+    case QEvent::HoverMove: {
+        QHoverEvent *he = static_cast<QHoverEvent *>(e);
+        const QPointF widgetPos = d->m_view->mapFromGlobal(he->pos());
+        const QPointF oldWidgetPos = d->m_view->mapFromGlobal(he->oldPos());
+        QHoverEvent cloneEvent(he->type(), widgetPos, oldWidgetPos, he->modifiers());
+        cloneEvent.setAccepted(false);
+        QCoreApplication::sendEvent(d->m_view.get(), &cloneEvent);
+        e->setAccepted(cloneEvent.isAccepted());
+        return;
+    }
+    case QEvent::Wheel: {
+        QWheelEvent *we = static_cast<QWheelEvent *>(e);
+        const QPointF widgetPos = d->m_view->mapFromGlobal(we->position().toPoint());
+        QWheelEvent cloneEvent(widgetPos, we->globalPosition(), we->pixelDelta(), we->angleDelta(), we->buttons(),
+                               we->modifiers(), we->phase(), we->inverted());
+        cloneEvent.setAccepted(false);
+        QCoreApplication::sendEvent(d->m_view.get(), &cloneEvent);
+        e->setAccepted(cloneEvent.isAccepted());
+        return;
+    }
+    default:
+        return;
+    }
+}
+
+void Renderer::forwardKeyEvent(QKeyEvent *keyEvent)
+{
+    if (!d->m_visible) {
+        return;
+    }
+    QCoreApplication::sendEvent(d->m_view.get(), keyEvent);
+}
+
+QRect Renderer::geometry() const
+{
+    return d->m_view->geometry();
+}
+
+void Renderer::setOpacity(qreal opacity)
+{
+    d->m_view->setOpacity(opacity);
+}
+
+qreal Renderer::opacity() const
+{
+    return d->m_view->opacity();
+}
+
+QQuickItem *Renderer::contentItem() const
+{
+    return d->m_view->contentItem();
+}
+
+QQuickWindow *Renderer::window() const
+{
+    return d->m_view.get();
+}
+
+void Renderer::setVisible(bool visible)
+{
+    if (d->m_visible == visible) {
+        return;
+    }
+    d->m_visible = visible;
+
+    if (visible) {
+        Q_EMIT d->m_renderControl->renderRequested();
+    } else {
+        // deferred to not change GL context
+        QTimer::singleShot(0, this, [this]() {
+            d->releaseResources();
+        });
+    }
+}
+
+bool Renderer::isVisible() const
+{
+    return d->m_visible;
+}
+
+void Renderer::show()
+{
+    setVisible(true);
+}
+
+void Renderer::hide()
+{
+    setVisible(false);
+}
+
+QImage Renderer::bufferAsImage() const
+{
+    return d->m_image;
+}
+
+QSize Renderer::size() const
+{
+    return d->m_view->geometry().size();
+}
+
+void Renderer::setGeometry(const QRect &rect)
+{
+    const QRect oldGeometry = d->m_view->geometry();
+    d->m_view->setGeometry(rect);
+    // QWindow::setGeometry() won't sync output if there's no platform window.
+    d->m_view->setScreen(QGuiApplication::screenAt(rect.center()));
+    Q_EMIT geometryChanged(oldGeometry, rect);
+}
+
+void Renderer::Private::releaseResources()
+{
+    if (m_glcontext) {
+        m_glcontext->makeCurrent(m_offscreenSurface.get());
+        m_view->releaseResources();
+        m_glcontext->doneCurrent();
+    } else {
+        m_view->releaseResources();
+    }
+}
+
+} // namespace Aurorae
+
+#include "moc_renderer.cpp"
diff --git a/src/plugins/kdecorations/aurorae/src/renderer.h b/src/plugins/kdecorations/aurorae/src/renderer.h
new file mode 100644
index 0000000000..50a8a985fc
--- /dev/null
+++ b/src/plugins/kdecorations/aurorae/src/renderer.h
@@ -0,0 +1,79 @@
+/*
+    KWin - the KDE window manager
+    This file is part of the KDE project.
+
+    SPDX-FileCopyrightText: 2019 David Edmundson <davidedmundson@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#pragma once
+
+#include <QObject>
+#include <QRect>
+#include <QUrl>
+
+#include <memory>
+
+class QKeyEvent;
+class QMouseEvent;
+
+class QMouseEvent;
+class QKeyEvent;
+
+class QQmlContext;
+class QQuickItem;
+class QQuickWindow;
+
+namespace Aurorae
+{
+
+class Renderer : public QObject
+{
+    Q_OBJECT
+
+public:
+    explicit Renderer();
+    ~Renderer();
+
+    QSize size() const;
+
+    void setGeometry(const QRect &rect);
+    QRect geometry() const;
+
+    void setOpacity(qreal opacity);
+    qreal opacity() const;
+
+    void update();
+
+    QQuickItem *contentItem() const;
+    QQuickWindow *window() const;
+
+    void setVisible(bool visible);
+    bool isVisible() const;
+
+    void show();
+    void hide();
+
+    void setDevicePixelRatio(qreal dpr);
+
+    QImage bufferAsImage() const;
+
+    void forwardMouseEvent(QEvent *mouseEvent);
+    void forwardKeyEvent(QKeyEvent *keyEvent);
+
+Q_SIGNALS:
+    void repaintNeeded();
+    void geometryChanged(const QRect &oldGeometry, const QRect &newGeometry);
+    void renderRequested();
+    void sceneChanged();
+
+private:
+    void handleRenderRequested();
+    void handleSceneChanged();
+
+    class Private;
+    std::unique_ptr<Private> d;
+};
+
+} // namespace Aurorae
-- 
2.49.0


From 343ea738c1279ac24109bdcc86ba31850bbf2616 Mon Sep 17 00:00:00 2001
From: Vlad Zahorodnii <vlad.zahorodnii@kde.org>
Date: Sun, 5 Jan 2025 14:02:20 +0200
Subject: [PATCH 2/2] Make it build

(cherry-picked from aurorae.git 993b4edad910eb3c846a0da88a02821a1794185e)

Signed-off-by: Andreas Sturmlechner <asturm@gentoo.org>
---
 .../kdecorations/aurorae/CMakeLists.txt       | 86 ++++++++++++++++++-
 .../kdecorations/aurorae/src/CMakeLists.txt   | 55 ++++++------
 .../aurorae/src/config/CMakeLists.txt         |  1 -
 3 files changed, 109 insertions(+), 33 deletions(-)

diff --git a/src/plugins/kdecorations/aurorae/CMakeLists.txt b/src/plugins/kdecorations/aurorae/CMakeLists.txt
index d383cfbeb6..f7ce73c9ca 100644
--- a/src/plugins/kdecorations/aurorae/CMakeLists.txt
+++ b/src/plugins/kdecorations/aurorae/CMakeLists.txt
@@ -1,4 +1,86 @@
-add_subdirectory(src)
-#add_subdirectory(themes/example-deco)
+cmake_minimum_required(VERSION 3.16)
+
+set(PROJECT_VERSION "6.3.0" CACHE STRING "PROJECT VERSION") # Handled by release scripts
+project(aurorae VERSION ${PROJECT_VERSION})
+
+set(CMAKE_C_STANDARD 99)
+set(CMAKE_CXX_STANDARD 23)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
+set(PROJECT_DEP_VERSION "6.2.0")
+set(QT_MIN_VERSION "6.7.0")
+set(KF6_MIN_VERSION "6.5.0")
+set(KDE_COMPILERSETTINGS_LEVEL "5.82")
+
+find_package(ECM ${KF6_MIN_VERSION} REQUIRED NO_MODULE)
+set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH})
+
+include(CMakePackageConfigHelpers)
+include(FeatureSummary)
+include(WriteBasicConfigVersionFile)
+include(CheckCXXSourceCompiles)
+include(CheckCXXCompilerFlag)
+
+include(KDEInstallDirs)
+include(KDECMakeSettings)
+include(KDECompilerSettings NO_POLICY_SCOPE)
+include(KDEClangFormat)
+include(KDEGitCommitHooks)
+
+include(ECMDeprecationSettings)
+
+find_package(Qt6 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS
+    Core
+    DBus
+    Quick
+    UiTools
+    Widgets
+)
+
+find_package(KF6 ${KF6_MIN_VERSION} REQUIRED COMPONENTS
+    ColorScheme
+    Config
+    CoreAddons
+    I18n
+    KCMUtils
+    NewStuff
+    Package
+    Svg
+    WindowSystem
+)
 
+find_package(KDecoration3 ${PROJECT_DEP_VERSION} CONFIG REQUIRED)
+
+check_cxx_compiler_flag(-Wno-unused-parameter COMPILER_UNUSED_PARAMETER_SUPPORTED)
+if (COMPILER_UNUSED_PARAMETER_SUPPORTED)
+    add_compile_options(-Wno-unused-parameter)
+endif()
+
+add_definitions(
+    -DQT_NO_KEYWORDS
+    -DQT_USE_QSTRINGBUILDER
+    -DQT_NO_URL_CAST_FROM_STRING
+    -DQT_NO_CAST_TO_ASCII
+    -DQT_NO_FOREACH
+
+    # Prevent EGL headers from including platform headers, in particular Xlib.h.
+    -DMESA_EGL_NO_X11_HEADERS
+    -DEGL_NO_X11
+    -DEGL_NO_PLATFORM_SPECIFIC_TYPES
+)
+
+ecm_set_disabled_deprecation_versions(QT 5.15
+    KF 6.9.0
+)
+
+add_subdirectory(src)
 add_subdirectory(themes)
+
+# add clang-format target for all our real source files
+file(GLOB_RECURSE ALL_CLANG_FORMAT_SOURCE_FILES *.cpp *.h)
+kde_clang_format(${ALL_CLANG_FORMAT_SOURCE_FILES})
+kde_configure_git_pre_commit_hook(CHECKS CLANG_FORMAT)
+
+ki18n_install(po)
+
+feature_summary(WHAT ALL INCLUDE_QUIET_PACKAGES FATAL_ON_MISSING_REQUIRED_PACKAGES)
diff --git a/src/plugins/kdecorations/aurorae/src/CMakeLists.txt b/src/plugins/kdecorations/aurorae/src/CMakeLists.txt
index 2df54a1002..93d8f4309f 100644
--- a/src/plugins/kdecorations/aurorae/src/CMakeLists.txt
+++ b/src/plugins/kdecorations/aurorae/src/CMakeLists.txt
@@ -1,11 +1,15 @@
-########### decoration ###############
 include_directories(
     ./lib
     ${CMAKE_CURRENT_BINARY_DIR}
     ${CMAKE_CURRENT_SOURCE_DIR}
 )
 
-set(kwin5_aurorae_PART_SRCS
+add_library(kwin5_aurorae MODULE)
+set_target_properties(kwin5_aurorae PROPERTIES
+    LIBRARY_OUTPUT_NAME "org.kde.kwin.aurorae"
+)
+
+target_sources(kwin5_aurorae PRIVATE
     aurorae.cpp
     decorationoptions.cpp
     lib/auroraetheme.cpp
@@ -13,12 +17,6 @@ set(kwin5_aurorae_PART_SRCS
     renderer.cpp
 )
 
-add_library(kwin5_aurorae MODULE ${kwin5_aurorae_PART_SRCS})
-set_target_properties(kwin5_aurorae PROPERTIES
-    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/org.kde.kdecoration3/"
-    LIBRARY_OUTPUT_NAME "org.kde.kwin.aurorae"
-)
-
 target_compile_definitions(kwin5_aurorae PRIVATE
     -DTRANSLATION_DOMAIN=\"kwin\"
 )
@@ -34,18 +32,17 @@ target_link_libraries(kwin5_aurorae
 
 install(TARGETS kwin5_aurorae DESTINATION ${KDE_INSTALL_PLUGINDIR}/org.kde.kdecoration3)
 
-set(decoration_plugin_SRCS
+add_library(decorationplugin SHARED)
+target_sources(decorationplugin PRIVATE
     colorhelper.cpp
     decorationoptions.cpp
     decorationplugin.cpp
 )
 
-add_library(decorationplugin SHARED ${decoration_plugin_SRCS})
-set_target_properties(decorationplugin PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/org/kde/kwin/decoration/")
 target_compile_definitions(decorationplugin PRIVATE
     -DTRANSLATION_DOMAIN=\"kwin\"
 )
-target_link_libraries(decorationplugin
+target_link_libraries(decorationplugin PRIVATE
     KDecoration3::KDecoration
     KF6::ColorScheme
     Qt::Quick
@@ -53,14 +50,7 @@ target_link_libraries(decorationplugin
 install(TARGETS decorationplugin DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/kwin/decoration)
 
 configure_file(aurorae.knsrc.cmake ${CMAKE_CURRENT_BINARY_DIR}/aurorae.knsrc)
-
-########### install files ###############
-
-if (KWIN_BUILD_KCMS)
-    add_subdirectory(config)
-
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/aurorae.knsrc DESTINATION ${KDE_INSTALL_KNSRCDIR})
-endif()
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/aurorae.knsrc DESTINATION ${KDE_INSTALL_KNSRCDIR})
 
 install(
     FILES
@@ -73,14 +63,19 @@ install(
         qml/MenuButton.qml
         qml/aurorae.qml
     DESTINATION
-        ${KDE_INSTALL_DATADIR}/kwin/aurorae)
-set(QMLFILES
-    qml/AppMenuButton.qml
-    qml/ButtonGroup.qml
-    qml/Decoration.qml
-    qml/DecorationButton.qml
-    qml/MenuButton.qml
-    qml/qmldir
+        ${KDE_INSTALL_DATADIR}/kwin/aurorae
 )
-install(FILES ${QMLFILES} DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/kwin/decoration)
-file(COPY ${QMLFILES} DESTINATION ${CMAKE_BINARY_DIR}/bin/org/kde/kwin/decoration/)
+
+install(
+    FILES
+        qml/AppMenuButton.qml
+        qml/ButtonGroup.qml
+        qml/Decoration.qml
+        qml/DecorationButton.qml
+        qml/MenuButton.qml
+        qml/qmldir
+    DESTINATION
+        ${KDE_INSTALL_QMLDIR}/org/kde/kwin/decoration
+)
+
+add_subdirectory(config)
diff --git a/src/plugins/kdecorations/aurorae/src/config/CMakeLists.txt b/src/plugins/kdecorations/aurorae/src/config/CMakeLists.txt
index e44fb2c79d..7c212ba3f0 100644
--- a/src/plugins/kdecorations/aurorae/src/config/CMakeLists.txt
+++ b/src/plugins/kdecorations/aurorae/src/config/CMakeLists.txt
@@ -7,5 +7,4 @@ target_link_libraries(kcm_auroraedecoration
     Qt::DBus
     Qt::UiTools
     Qt::Widgets
-    KWinEffectsInterface
 )
-- 
2.49.0

